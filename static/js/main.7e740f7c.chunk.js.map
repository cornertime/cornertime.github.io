{"version":3,"sources":["models.ts","random.ts","speech.ts","settings.ts","state.ts","components/WelcomeScreen.tsx","forms.tsx","serialization.ts","components/PunishmentSetup.tsx","components/PunishmentLoader.tsx","time.ts","components/ReportCard.tsx","components/ReportViewer.tsx","components/App.tsx","index.tsx"],"names":["defaultPreset","title","durationRange","minimum","maximum","penaltyRange","penaltyProbabilities","encouragementProbability","phrases","getReady","start","encourage","scold","penalize","end","randomInteger","min","max","Math","floor","random","randomElement","items","length","BrowserSpeech","Object","classCallCheck","this","createClass","key","value","phrase","context","utter","SpeechSynthesisUtterance","speechSynthesis","speak","MockSpeech","transcript","push","defaultSettings","name","threshold","preparationSeconds","cooldownSeconds","diffy","resolution","x","y","sensitivity","sourceDimensions","w","h","debug","getSettings","localStorage","storedSettings","getItem","JSON","parse","PunishmentStateMachine","state","arguments","undefined","preset","initialDuration","totalDuration","startedAt","events","speech","process","getSpeech","settings","violations","listeners","currentTime","cooldownEndTime","timer","currentTickMotionSum","currentTickMotionCount","reset","transition","startClock","Date","toISOString","range","penalty","stopClock","fromStates","toState","eventType","adjustment","indexOf","TypeError","concat","time","speakRandomPhrase","updateListeners","forEach","listener","idx","penaltyProbability","lastIndex","_this","window","setInterval","tick","clearInterval","magnitude","cooldownFinished","movementDetected","presetTitle","WelcomeScreen","props","fsm","react","className","onClick","onCustom","onPreset","onReport","href","target","rel","React","TextField","label","type","maxLength","onChange","helpText","SecondsField","ProbabilityField","step","MultiLineField","rows","LINE_LENGTH","serializeReport","report","serialize","serializePreset","deserializeReport","data","deserialize","deserializePreset","makeHeader","kind","makeFooter","obj","str","header","footer","longStr","lineLength","lines","line","slice","join","wrapLines","stringify","btoa","encodeURIComponent","replace","match","p1","String","fromCharCode","parseInt","trim","expectedHeader","expectedFooter","decodeURIComponent","atob","split","map","c","charCodeAt","toString","anyWindow","cornertime","assign","PunishmentSetup","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","loadPreset","onChangeNumeric","currentTarget","parseFloat","stateChange","defineProperty","setState","onChangeText","onChangePenaltyProbabilities","rawValue","rawPenaltyProbabilities","e","onChangePhrases","_stateChange3","rawName","charAt","toUpperCase","s","minimumDuration","maximumDuration","minimumPenalty","maximumPenalty","p","getReadyPhrases","rawGetReadyPhrases","startPhrases","rawStartPhrases","encouragePhrases","rawEncouragePhrases","scoldPhrases","rawScoldPhrases","penalizePhrases","rawPenalizePhrases","endPhrases","rawEndPhrases","onSubmit","onBack","forms_TextField","forms_SecondsField","forms_ProbabilityField","forms_MultiLineField","serializedPreset","PunishmentLoader","isValid","disabled","cols","formatDuration","seconds","sign","minutes","formattedSeconds","hours","formattedMinutes","ReportCard","showMessage","filter","formatEventMessage","ReportViewer","reportSource","ReportCard_ReportCard","MOTION_MAX","App","setupScreen","setUpCustom","viewReport","returnToWelcomeScreen","handleFsmUpdate","forceUpdate","handleMotionUpdate","matrix","minValue","apply","toConsumableArray","row","_this2","addListener","create","objectSpread","onFrame","removeListener","PunishmentSetup_PunishmentSetup","PunishmentLoader_PunishmentLoader","ReportViewer_ReportViewer","WelcomeScreen_WelcomeScreen","timeLeft","ReactDOM","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.7e740f7c.chunk.js","sourcesContent":["export interface Preset {\n    title: string;\n    durationRange: {\n        minimum: number; // inclusive (all times are seconds)\n        maximum: number; // exclusive\n    };\n    penaltyRange: {\n        minimum: number;\n        maximum: number;\n    };\n\n    /**\n     * 0.1–1.0, per consecutive violation.\n     * first violation uses penaltyProbabilities[0], the next uses penaltyProbabilities[1] and so on.\n     * last element used when exhausted.\n     */\n    penaltyProbabilities: number[];\n\n    // TODO Make per phrase tunable?\n    // TODO Introduce different kinds of encouragements for different parts?\n    encouragementProbability: number;\n\n    phrases: Phrases;\n}\n\n\nexport const defaultPreset: Preset = {\n    title: 'Default Punishment',\n    durationRange: {\n        minimum: 600,\n        maximum: 900,\n    },\n    penaltyRange: {\n        minimum: 60,\n        maximum: 180,\n    },\n\n    // first violation will trigger a scold, subsequent ones will trigger penalties\n    penaltyProbabilities: [0.0, 1.0],\n\n    encouragementProbability: 0.1,\n    phrases: {\n        getReady: [\n            `You have been naughty. Get in the corner, facing the wall.`,\n        ],\n        start: [\n            `You better not move. I'm starting your punishment now.`,\n        ],\n        encourage: [\n            `You're doing fine. Keep it up and this will be over in no time.`,\n        ],\n        scold: [\n            `Do I see you moving?`,\n        ],\n        penalize: [\n            `I warned you not to move. I'm adding some more minutes in the clock.`,\n        ],\n        end: [\n            `You can come out of the corner now.`\n        ],\n    }\n};\n\n\nexport interface Phrases {\n    getReady: string[];\n    start: string[];\n    encourage: string[];\n    scold: string[];\n    penalize: string[];\n    end: string[];\n}\n\n\nexport type State = 'waiting' | 'preparation' | 'punishment' | 'cooldown' | 'finished';\nexport const allStates: State[] = ['waiting', 'preparation', 'punishment', 'cooldown', 'finished'];\nexport type EventType = 'getReady' | 'start' |  'scold' | 'encourage' | 'penalize' | 'end';\n\n\nexport interface Event {\n    eventType: EventType;\n    time: number;\n    adjustment: number;\n}\n\n\nexport interface Report {\n    name: string;\n    presetTitle: string;\n    initialDuration: number;\n    totalDuration: number;\n    startedAt: string; // ISO-8601 timestamp\n    events: Event[];\n    violations: number; // equals the number of total scold and penalize events\n}\n","export function randomInteger(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\n\nexport function randomElement<T>(items: T[]): T {\n    return items[randomInteger(0, items.length)];\n}\n","import { randomElement } from './random';\n\n\nexport interface Speech {\n    speak(phrase: string, context: object): void;\n    speakRandomPhrase(phrases: string[], context: object): void;\n}\n\n\nexport class BrowserSpeech implements Speech {\n    // TODO voice selection\n\n    speak(phrase: string, context: object) {\n        // TODO render template\n        const utter = new SpeechSynthesisUtterance(phrase);\n        speechSynthesis.speak(utter);\n    }\n\n    speakRandomPhrase(phrases: string[], context: object) {\n        const phrase = randomElement(phrases);\n        this.speak(phrase, context);\n    }\n}\n\n\nexport class MockSpeech {\n    transcript: string[] = [];\n\n    reset() {\n        this.transcript = [];\n    }\n\n    speak(phrase: string, context: object) {\n        // TODO render template\n        this.transcript.push(phrase);\n    }\n\n    speakRandomPhrase(phrases: string[], context: object) {\n        if (phrases.length === 0) {\n            return;\n        }\n\n        const phrase = randomElement(phrases);\n        this.speak(phrase, context);\n    }\n}\n\n\nexport default function getSpeech(env: string = process.env.NODE_ENV!): Speech {\n    if (env === 'test') {\n        return new MockSpeech();\n    } else {\n        return new BrowserSpeech();\n    }\n}\n","export interface Settings {\n    /**\n     * Diffy returns us a NxM matrix. We take maximum movement of that and average it over 1s.\n     * This is the threshold between 0.0 and 1.0 that average must cross in order to be considered\n     * movement.\n     */\n    threshold: number; // between 0.0–1.0\n    name: string;\n    preparationSeconds: number;\n    cooldownSeconds: number;\n\n    /**\n     * These parameters are given as-is to diffy.js, the movement detection library.\n     */\n    diffy: {\n        /**\n         * any number between 0 and 255 can be used. But ahem magic numbers are around 20 and 25.\n         * Experiment with this. This parameter defines the minimum average value that registers\n         * as \"movement\" for Diffy.js\n         */\n        threshold: number;\n\n        /**\n         * sensitivity (number) [default: 0.2] - a decimal value between 0 and 1. It impacts the\n         * contrast of the blended image. Somewhere around 0.2 is usually good. yay magic numbers!\n         */\n        sensitivity: number;\n\n        /**\n         * defines the dimensions for the source frame. Keep in mind that the larger the dimensions,\n         * the more pixels Diffy.js needs to examine, hence the lower the performance.\n         */\n        sourceDimensions: {\n            w: number;\n            h: number;\n        };\n\n        /**\n         * defines the size of the output matrix. generally a denser output matrix makes us notice\n         * smaller movement (note ../threshold though).\n         */\n        resolution: {\n            x: number;\n            y: number;\n        };\n\n        /**\n         * Show or hide the debug window\n         */\n        debug: boolean;\n    };\n}\n\n\nconst defaultSettings: Settings = {\n    name: 'Anonymous',\n    threshold: 0.3,\n    preparationSeconds: 10,\n    cooldownSeconds: 5,\n    diffy: {\n        resolution: { x: 10, y: 10 },\n        sensitivity: 0.2,\n        threshold: 21,\n        sourceDimensions: { w: 130, h: 100 },\n        // debug: process.env.NODE_ENV !== 'production',\n        debug: false,\n    },\n};\n\n\nexport default function getSettings(): Settings {\n    if (typeof localStorage !== 'undefined') {\n        const storedSettings = localStorage.getItem('settings');\n        if (storedSettings) {\n            return JSON.parse(storedSettings);\n        }\n    }\n\n    return defaultSettings;\n}\n","import { Preset, Event, EventType, State, defaultPreset, Report } from './models';\nimport { randomInteger } from './random';\nimport getSpeech from './speech';\nimport getSettings from './settings';\n\n\nexport type Listener = () => void;\n\nconst PREPARATION_SECONDS = 10;\nconst COOLDOWN_SECONDS = 5;\n\n\nexport default class PunishmentStateMachine {\n    preset: Preset = defaultPreset;\n    initialDuration: number = 0;\n    totalDuration: number = 0;\n    startedAt: string = ''; // ISO-8601 timestamp\n    events: Event[] = [];\n    state: State = 'waiting';\n    speech = getSpeech();\n    context = {};\n    settings = getSettings();\n    violations = 0;\n    listeners: Listener[] = [];\n    currentTime = 0;\n    cooldownEndTime = 0;\n    timer = 0;\n    currentTickMotionSum = 0;\n    currentTickMotionCount = 0;\n\n    public get currentTickMotionAverage() {\n        if (this.currentTickMotionCount === 0) {\n            return 0;\n        } else {\n            return this.currentTickMotionSum / this.currentTickMotionCount;\n        }\n    }\n\n    public get timeLeft() {\n        return this.totalDuration - this.currentTime;\n    }\n\n    /**\n     * @param state For testing. Production use should always reset to 'waiting'.\n     */\n    constructor(state: State = 'waiting') {\n        this.reset(state);\n    }\n\n    /**\n     * @param state For testing. Production use should always reset to 'waiting'.\n     */\n    reset(state: State = 'waiting') {\n        this.initialDuration = randomInteger(\n            this.preset.durationRange.minimum,\n            this.preset.durationRange.maximum,\n        );\n        this.totalDuration = this.initialDuration;\n        this.startedAt = '';\n        this.events = [];\n        this.state = state;\n        this.context = {}; // TODO\n        this.settings = getSettings();\n        this.violations = 0;\n        this.cooldownEndTime = 0;\n        this.currentTime = -PREPARATION_SECONDS;\n        this.currentTickMotionSum = 0;\n        this.currentTickMotionCount = 0;\n    }\n\n    loadPreset(preset: Preset) {\n        this.preset = preset;\n        this.reset();\n    }\n\n    // BEGIN STATE TRANSITION METHODS\n\n    getReady() {\n        this.transition(['waiting'], 'preparation', 'getReady');\n        this.startClock();\n    }\n\n    start() {\n        this.transition(['preparation'], 'punishment', 'start');\n        this.startedAt = (new Date()).toISOString();\n    }\n\n    scold() {\n        this.transition(['punishment'], 'cooldown', 'scold');\n    }\n\n    penalize() {\n        const range = this.preset.penaltyRange;\n        const penalty = randomInteger(range.minimum, range.maximum);\n        this.transition(['punishment'], 'cooldown', 'penalize', penalty);\n    }\n\n    cooldownFinished() {\n        this.transition(['cooldown'], 'punishment');\n    }\n\n    end() {\n        this.transition(['punishment', 'cooldown'], 'finished', 'end');\n        this.stopClock();\n    }\n\n    // END STATE TRANSITION METHODS\n\n    transition(fromStates: State[], toState: State, eventType?: EventType, adjustment: number = 0) {\n        if (fromStates.indexOf(this.state) < 0) {\n            throw new TypeError(`cannot go to ${toState} from ${this.state}`);\n        }\n\n        this.state = toState;\n        this.totalDuration += adjustment;\n\n        if (!eventType) {\n            return;\n        }\n\n        this.events.push({\n            adjustment,\n            eventType,\n            time: this.currentTime,\n        });\n\n        const phrases = this.preset.phrases[eventType];\n        if (phrases.length > 0) {\n            this.speech.speakRandomPhrase(phrases, this.context);\n        }\n\n        this.updateListeners();\n    }\n\n    updateListeners() {\n        this.listeners.forEach(listener => listener());\n    }\n\n    addListener(listener: Listener) {\n        this.listeners.push(listener);\n    }\n\n    removeListener(listener: Listener) {\n        const idx = this.listeners.indexOf(listener);\n        if (idx >= 0) {\n            delete this.listeners[idx];\n        }\n    }\n\n    encourage() {\n        if (this.state !== 'punishment') {\n            throw new TypeError(`cannot encourage in state ${this.state}`);\n        } else if (this.preset.phrases.encourage.length === 0) {\n            return;\n        }\n\n        this.events.push({\n            eventType: 'encourage',\n            adjustment: 0,\n            time: this.currentTime,\n        });\n        this.speech.speakRandomPhrase(this.preset.phrases.encourage, this.context);\n\n        this.updateListeners();\n    }\n\n    movementDetected() {\n        if (this.state !== 'punishment') {\n            return;\n        }\n\n        let penaltyProbability = this.preset.penaltyProbabilities[this.violations];\n        this.violations += 1;\n        this.cooldownEndTime = this.currentTime + COOLDOWN_SECONDS;\n\n        if (typeof penaltyProbability === 'undefined') {\n            const lastIndex = this.preset.penaltyProbabilities.length - 1;\n            penaltyProbability = this.preset.penaltyProbabilities[lastIndex];\n        }\n\n        if (Math.random() < penaltyProbability) {\n            this.penalize();\n        } else {\n            this.scold();\n        }\n    }\n\n    startClock() {\n        if (process.env.NODE_ENV === 'test') {\n            return;\n        }\n\n        this.timer = window.setInterval(() => this.tick(), 1000);\n    }\n\n    stopClock() {\n        if (process.env.NODE_ENV === 'test') {\n            return;\n        }\n\n        window.clearInterval(this.timer);\n    }\n\n    handleMotionUpdate(magnitude: number) {\n        if (this.state !== 'punishment') {\n            return;\n        }\n\n        this.currentTickMotionSum += magnitude;\n        this.currentTickMotionCount += 1;\n    }\n\n    tick() {\n        this.currentTime += 1;\n\n        switch (this.state) {\n            case 'preparation':\n                if (this.currentTime >= 0) {\n                    this.start();\n                }\n                break;\n\n\n            case 'cooldown':\n                if (this.currentTime >= this.totalDuration) {\n                    this.end();\n                } else if (this.currentTime >= this.cooldownEndTime) {\n                    this.cooldownFinished();\n                }\n                break;\n\n            case 'punishment':\n                if (this.currentTime >= this.totalDuration) {\n                    this.end();\n                } else if (this.currentTickMotionSum > this.settings.threshold) {\n                    this.movementDetected();\n                } else if (this.currentTime % 60 === 0 && Math.random() < this.preset.encouragementProbability) {\n                    // On full minutes there is a chance of receiving encouragement.\n                    this.encourage();\n                }\n                break;\n\n            case 'waiting':\n            case 'finished':\n            default:\n                throw TypeError(`Clock should not be running in ${this.state}`);\n        }\n\n        this.currentTickMotionSum = 0;\n\n        this.updateListeners();\n    }\n\n    report(): Report {\n        if (this.state !== 'finished') {\n            throw new TypeError(`report is not available in ${this.state}`);\n        }\n\n        return {\n            name: this.settings.name,\n            presetTitle: this.preset.title,\n            initialDuration: this.initialDuration,\n            totalDuration: this.totalDuration,\n            startedAt: this.startedAt,\n            events: this.events,\n            violations: this.violations,\n        };\n    }\n}\n","import PunishmentStateMachine from '../state';\nimport * as React from 'react';\n\n\ninterface WelcomeScreenProps {\n    fsm: PunishmentStateMachine;\n    onCustom(): void;\n    onPreset(): void;\n    onReport(): void;\n}\n\n\nexport default class WelcomeScreen extends React.Component<WelcomeScreenProps, {}> {\n    render() {\n        return (\n            <div className=\"container my-4\">\n                <div className=\"jumbotron\">\n                    <h1 className=\"display-3\">Corner Time!</h1>\n                    <p className=\"lead\">\n                        So you have been naughty? I will put you in the corner and use your\n                        webcam to make sure you do not move!\n                    </p>\n                    <button className=\"btn btn-primary btn-block btn-lg my-4\" onClick={this.start}>\n                        Start a 10–15 Minute Punishment Now\n                    </button>\n                    <p className=\"text-muted text-center\"><small>\n                        There will be voice instructions. Set your webcam 2–3 meters away from where you will be\n                        standing. Make sure your computer will not lock or sleep (OS X: <code>caffeinate -d</code>).\n                    </small></p>\n                    <p className=\"text-muted text-center\"><small>\n                        Don't worry! Video from your webcam <strong>will not be sent</strong> over the Internet.{' '}\n                    </small></p>\n                    <p className=\"text-center\">\n                        <button className=\"btn btn-link\" onClick={this.props.onCustom}>\n                            Design a Custom Punishment\n                        </button>\n                        <button className=\"btn btn-link\" onClick={this.props.onPreset}>\n                            Carry Out a Custom Punishment\n                        </button>\n                        <button className=\"btn btn-link\" onClick={this.props.onReport}>\n                            View a Punishment Report\n                        </button>\n                    </p>\n                </div>\n\n                <p className=\"text-muted text-center\"><small>\n                    <strong>2019-05-07:</strong> The application works in modern browsers again!\n                </small></p>\n                <p className=\"text-muted text-center\"><small>\n                    <a href=\"https://github.com/cornertime/cornertime\" target=\"_blank\" rel=\"noopener noreferrer\">Source Code</a>\n                </small></p>\n            </div>\n        );\n    }\n\n    start = () => this.props.fsm.getReady();\n}\n","import * as React from 'react';\n\n\nexport interface FieldProps {\n    name: string;\n    label: string;\n    helpText?: string;\n}\n\n\nexport interface TextFieldProps extends FieldProps {\n    value: string;\n    onChange(event: React.FormEvent<HTMLInputElement>): void;\n}\n\n\nexport const TextField = (props: TextFieldProps) => (\n    <div className=\"form-group row\">\n        <label className=\"col-sm-3 col-form-label\">{props.label}</label>\n        <div className=\"col-sm-9\">\n            <input\n                className=\"form-control\"\n                name={props.name}\n                type=\"text\"\n                maxLength={255}\n                value={props.value}\n                onChange={props.onChange}\n            />\n            {props.helpText ? <small className=\"form-text text-muted\">{props.helpText}</small> : null}\n        </div>\n    </div>\n);\n\n\nexport interface NumericFieldProps extends FieldProps {\n    value: number;\n    onChange(event: React.FormEvent<HTMLInputElement>): void;\n}\n\n\nexport const SecondsField = (props: NumericFieldProps) => (\n    <div className=\"form-group row\">\n        <label className=\"col-sm-3 col-form-label\">{props.label}</label>\n        <div className=\"col-sm-9\">\n            <input\n                className=\"form-control\"\n                name={props.name}\n                type=\"number\"\n                min={0}\n                max={86400}\n                value={props.value}\n                onChange={props.onChange}\n            />\n            {props.helpText ? <small className=\"form-text text-muted\">{props.helpText}</small> : null}\n        </div>\n    </div>\n);\n\n\nexport const ProbabilityField = (props: NumericFieldProps) => (\n    <div className=\"form-group row\">\n        <label className=\"col-sm-3 col-form-label\">{props.label}</label>\n        <div className=\"col-sm-9\">\n            <input\n                className=\"form-control\"\n                name={props.name}\n                type=\"number\"\n                min={0.0}\n                max={1.0}\n                step={0.01}\n                value={props.value}\n                onChange={props.onChange}\n            />\n            {props.helpText ? <small className=\"form-text text-muted\">{props.helpText}</small> : null}\n        </div>\n    </div>\n);\n\n\nexport interface MultiLineFieldProps extends FieldProps {\n    value: string;\n    onChange(event: React.FormEvent<HTMLTextAreaElement>): void;\n}\n\n\nexport const MultiLineField = (props: MultiLineFieldProps) => (\n    <div className=\"form-group row\">\n        <label className=\"col-sm-3 col-form-label\">{props.label}</label>\n        <div className=\"col-sm-9\">\n            <textarea\n                rows={6}\n                className=\"form-control\"\n                name={props.name}\n                value={props.value}\n                onChange={props.onChange}\n            />\n            {props.helpText ? <small className=\"form-text text-muted\">{props.helpText}</small> : null}\n        </div>\n    </div>\n);\n","import { Report, Preset } from './models';\n\n\nconst LINE_LENGTH = 76;\ntype Kind = 'PUNISHMENT REPORT' | 'CUSTOM PUNISHMENT';\n\n\n// Public API of this module\n\nexport function serializeReport(report: Report): string {\n    return serialize(report, 'PUNISHMENT REPORT');\n}\n\nexport function serializePreset(preset: Preset): string {\n    return serialize(preset, 'CUSTOM PUNISHMENT');\n}\n\n\nexport function deserializeReport(data: string): Report {\n    return deserialize(data, 'PUNISHMENT REPORT');\n}\n\nexport function deserializePreset(data: string): Preset {\n    return deserialize(data, 'CUSTOM PUNISHMENT');\n}\n\n// The rest are exported only for testing\n\n\nfunction makeHeader(kind: Kind) {\n    return `-----BEGIN CORNERTIME ${kind}-----`;\n}\n\nfunction makeFooter(kind: Kind) {\n    return `-----END CORNERTIME ${kind}-----`;\n}\n\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\nexport function encodeBase64(str: string): string {\n    // first we use encodeURIComponent to get percent-encoded UTF-8,\n    // then we convert the percent encodings into raw bytes which\n    // can be fed into btoa.\n    return btoa(encodeURIComponent(str).replace(\n        /%([0-9A-F]{2})/g,\n        (match, p1) => String.fromCharCode(parseInt('0x' + p1, 16)),\n    ));\n}\n\n\nexport function decodeBase64(str: string) {\n    // Going backwards: from bytestream, to percent-encoding, to original string.\n    return decodeURIComponent(\n        atob(str).split('').map(c =>  '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join('')\n    );\n}\n\n\nexport function wrapLines(longStr: string, lineLength: number = LINE_LENGTH): string {\n    const lines: string[] = [];\n    let start = 0;\n\n    let line = '';\n    while ((line = longStr.slice(start, start + lineLength))) {\n        lines.push(line);\n        start += lineLength;\n    }\n\n    return lines.join('\\n');\n}\n\n\nexport function serialize(obj: object, kind: Kind): string {\n    const header = makeHeader(kind);\n    const footer = makeFooter(kind);\n    const data = wrapLines(encodeBase64(JSON.stringify(obj)));\n    return `${header}\\n${data}\\n${footer}`;\n}\n\nexport function deserialize(data: string, kind: Kind): any {\n    data = data.trim();\n\n    const expectedHeader = makeHeader(kind);\n    const expectedFooter = makeFooter(kind);\n\n    if (data.slice(0, expectedHeader.length) !== expectedHeader) {\n        throw new TypeError('data to deserialize does not start with our header');\n    }\n\n    if (data.slice(data.length - expectedFooter.length) !== expectedFooter) {\n        throw new TypeError('data to deserialize does not end with our footer');\n    }\n\n    // remove header and footer\n    data = data.slice(expectedHeader.length, data.length - expectedFooter.length);\n    data = decodeBase64(data);\n\n    // TODO Schema validation\n    return JSON.parse(data);\n}\n\n\n// Debug globals\nif (typeof window !== 'undefined') {\n    const anyWindow: any = window;\n    anyWindow.cornertime = anyWindow.cornertime || {};\n    Object.assign(anyWindow.cornertime, {\n        serializePreset,\n        serializeReport,\n        deserializePreset,\n        deserializeReport,\n    });\n}\n","import PunishmentStateMachine from '../state';\nimport * as React from 'react';\nimport { TextField, SecondsField, ProbabilityField, MultiLineField } from '../forms';\nimport { serializePreset } from '../serialization';\n\n\ninterface PunishmentSetupProps {\n    fsm: PunishmentStateMachine;\n    onBack(): void;\n}\n\ninterface PunishmentSetupState {\n    title: string;\n    minimumDuration: number;\n    maximumDuration: number;\n    minimumPenalty: number;\n    maximumPenalty: number;\n    encouragementProbability: number;\n\n    penaltyProbabilities: number[];\n    rawPenaltyProbabilities: string;\n\n    getReadyPhrases: string[];\n    rawGetReadyPhrases: string;\n\n    startPhrases: string[];\n    rawStartPhrases: string;\n\n    encouragePhrases: string[];\n    rawEncouragePhrases: string;\n\n    scoldPhrases: string[];\n    rawScoldPhrases: string;\n\n    penalizePhrases: string[];\n    rawPenalizePhrases: string;\n\n    endPhrases: string[];\n    rawEndPhrases: string;\n}\n\n\nexport default class PunishmentSetup extends React.Component<PunishmentSetupProps, PunishmentSetupState> {\n    constructor(props: PunishmentSetupProps) {\n        super(props);\n\n        const preset = props.fsm.preset;\n\n        this.state = {\n            title: preset.title === 'Default Punishment' ? 'Custom Punishment' : preset.title,\n            minimumDuration: preset.durationRange.minimum,\n            maximumDuration: preset.durationRange.maximum,\n            minimumPenalty: preset.penaltyRange.minimum,\n            maximumPenalty: preset.penaltyRange.maximum,\n            encouragementProbability: preset.encouragementProbability,\n            penaltyProbabilities: preset.penaltyProbabilities,\n            rawPenaltyProbabilities: preset.penaltyProbabilities.map(p => '' + p).join(' '),\n\n            getReadyPhrases: preset.phrases.getReady,\n            rawGetReadyPhrases: preset.phrases.getReady.join('\\n'),\n\n            startPhrases: preset.phrases.start,\n            rawStartPhrases: preset.phrases.start.join('\\n'),\n\n            encouragePhrases: preset.phrases.encourage,\n            rawEncouragePhrases: preset.phrases.encourage.join('\\n'),\n\n            scoldPhrases: preset.phrases.scold,\n            rawScoldPhrases: preset.phrases.scold.join('\\n'),\n\n            penalizePhrases: preset.phrases.penalize,\n            rawPenalizePhrases: preset.phrases.penalize.join('\\n'),\n\n            endPhrases: preset.phrases.end,\n            rawEndPhrases: preset.phrases.end.join('\\n'),\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"container my-4\">\n                <h2>Design a Custom Punishment</h2>\n\n                <form onSubmit={this.start} className=\"form\">\n                    <div className=\"row mt-3 mb-5\">\n                        <div className=\"col-md-10\">\n                            <button className=\"btn btn-primary btn-block btn-lg\" type=\"submit\">\n                                Start the Custom Punishment Now\n                            </button>\n                        </div>\n                        <div className=\"col-md-2\">\n                            <button className=\"btn btn-secondary btn-block btn-lg\" onClick={this.props.onBack}>\n                                Back\n                            </button>\n                        </div>\n                    </div>\n\n                    <TextField\n                        name=\"title\"\n                        label=\"Title of the custom punishment\"\n                        helpText=\"This is the only field that will be disclosed to the receiver before punishment.\"\n                        value={this.state.title}\n                        onChange={this.onChangeText}\n                    />\n\n                    <SecondsField\n                        name=\"minimumDuration\"\n                        label=\"Minimum duration (seconds)\"\n                        value={this.state.minimumDuration}\n                        onChange={this.onChangeNumeric}\n                    />\n\n                    <SecondsField\n                        name=\"maximumDuration\"\n                        label=\"Maximum duration (seconds)\"\n                        helpText=\"The duration of the punishment will be picked randomly within these bounds.\"\n                        value={this.state.maximumDuration}\n                        onChange={this.onChangeNumeric}\n                    />\n\n                    {/* TODO Richer field type */}\n                    <TextField\n                        name=\"penaltyProbabilities\"\n                        label=\"Penalty probabilities\"\n                        helpText={`Probability of penalty for each consecutive movement violation, separated by\n                                   whitespace. The first violation will use the first value, the second violation\n                                   will use the second value and so on until values run out, after which the last\n                                   value is used for any subsequent violations.`}\n                        value={this.state.rawPenaltyProbabilities}\n                        onChange={this.onChangePenaltyProbabilities}\n                    />\n\n                    <SecondsField\n                        name=\"minimumPenalty\"\n                        label=\"Minimum penalty (seconds)\"\n                        value={this.state.minimumPenalty}\n                        onChange={this.onChangeNumeric}\n                    />\n\n                    <SecondsField\n                        name=\"maximumPenalty\"\n                        label=\"Maximum penalty (seconds)\"\n                        value={this.state.maximumPenalty}\n                        onChange={this.onChangeNumeric}\n                        helpText={`When a penalty is given for moving, the time adjustment will be picked randomly\n                                   within these bounds.`}\n                    />\n\n                    <ProbabilityField\n                        name=\"encouragementProbability\"\n                        label=\"Encouragement probability\"\n                        value={this.state.encouragementProbability}\n                        onChange={this.onChangeNumeric}\n                        helpText={`At each full minute, there is a chance of receiving encouragement in the form of\n                                   one of the encouragement phrases. This field controls that probability.`}\n                    />\n\n                    <MultiLineField\n                        name=\"getReadyPhrases\"\n                        label=\"Get Ready phrases\"\n                        helpText={`One of these phrases will be spoken at random at the start of the preparation delay,\n                                   during which the person being punished is supposed to walk to the corner and assume\n                                   a position they can hold for the remainder of the punishment. One phrase per line.`}\n                        value={this.state.rawGetReadyPhrases}\n                        onChange={this.onChangePhrases}\n                    />\n\n                    <MultiLineField\n                        name=\"startPhrases\"\n                        label=\"Starting phrases\"\n                        helpText={`One of these phrases will be spoken at random at the start of the punishment.\n                                   One phrase per line.`}\n                        value={this.state.rawStartPhrases}\n                        onChange={this.onChangePhrases}\n                    />\n\n                    <MultiLineField\n                        name=\"scoldPhrases\"\n                        label=\"Scolding phrases\"\n                        helpText={`One of these phrases will be spoken at random when movement has been detected but\n                                   a penalty has not been triggered.`}\n                        value={this.state.rawScoldPhrases}\n                        onChange={this.onChangePhrases}\n                    />\n\n                    <MultiLineField\n                        name=\"penalizePhrases\"\n                        label=\"Penalty phrases\"\n                        helpText={`One of these phrases will be spoken at random when movement has been detected and\n                                   a penalty has been triggered.`}\n                        value={this.state.rawPenalizePhrases}\n                        onChange={this.onChangePhrases}\n                    />\n\n                    <MultiLineField\n                        name=\"encouragePhrases\"\n                        label=\"Encouragement phrases\"\n                        helpText={`One of these phrases may be spoken at random at any full minute as specified by the\n                                   encouragement probability.`}\n                        value={this.state.rawEncouragePhrases}\n                        onChange={this.onChangePhrases}\n                    />\n\n                    <MultiLineField\n                        name=\"endPhrases\"\n                        label=\"Ending phrases\"\n                        helpText={`One of these phrases will be spoken at random when the punishment is finished.`}\n                        value={this.state.rawEndPhrases}\n                        onChange={this.onChangePhrases}\n                    />\n                </form>\n\n                <p className=\"mt-5\">\n                    To have someone else use this preset without seeing its content, give this to them and instruct\n                    them to use the \"I Have a Custom Punishment\" link from the welcome screen.\n                </p>\n\n                <pre>{this.serializedPreset}</pre>\n            </div>\n        );\n    }\n\n    start = (event: React.MouseEvent<HTMLButtonElement> | React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        const fsm = this.props.fsm;\n\n        fsm.loadPreset(this.preset);\n        fsm.getReady();\n    }\n\n    public get preset() {\n        return {\n            title: this.state.title,\n            durationRange: {\n                minimum: this.state.minimumDuration,\n                maximum: this.state.maximumDuration,\n            },\n            penaltyProbabilities: this.state.penaltyProbabilities,\n            penaltyRange: {\n                minimum: this.state.minimumPenalty,\n                maximum: this.state.maximumPenalty,\n            },\n            encouragementProbability: this.state.encouragementProbability,\n            phrases: {\n                getReady: this.state.getReadyPhrases,\n                start: this.state.startPhrases,\n                scold: this.state.scoldPhrases,\n                penalize: this.state.penalizePhrases,\n                encourage: this.state.encouragePhrases,\n                end: this.state.endPhrases,\n            }\n        };\n    }\n\n    public get serializedPreset() {\n        return serializePreset(this.preset);\n    }\n\n    onChangeNumeric = (event: React.FormEvent<HTMLInputElement>) => {\n        const name = event.currentTarget.name;\n        const value = parseFloat(event.currentTarget.value);\n        const stateChange: any = { [name]: value };\n\n        this.setState(stateChange);\n    }\n\n    onChangeText = (event: React.FormEvent<HTMLInputElement>) => {\n        const name = event.currentTarget.name;\n        const value = event.currentTarget.value;\n        const stateChange: any = { [name]: value };\n\n        this.setState(stateChange);\n    }\n\n    onChangePenaltyProbabilities = (event: React.FormEvent<HTMLInputElement>) => {\n        const rawValue = event.currentTarget.value;\n        const stateChange: any = { rawPenaltyProbabilities: rawValue };\n\n        try {\n            stateChange.penaltyProbabilities = rawValue.split(/\\s+/).map(parseFloat);\n        } catch (e) {\n            // noop\n        }\n\n        this.setState(stateChange);\n    }\n\n    onChangePhrases = (event: React.FormEvent<HTMLTextAreaElement>) => {\n        const name = event.currentTarget.name;\n\n        const rawName = `raw${name.charAt(0).toUpperCase()}${name.slice(1)}`;\n        const rawValue = event.currentTarget.value;\n\n        const phrases = rawValue.split('\\n').map(s => s.trim());\n\n        const stateChange: any = {\n            [name]: phrases,\n            [rawName]: rawValue,\n        };\n\n        this.setState(stateChange);\n    }\n}\n","import { deserializePreset } from '../serialization';\nimport PunishmentStateMachine from '../state';\nimport * as React from 'react';\n\n\ninterface PunishmentLoaderProps {\n    fsm: PunishmentStateMachine;\n    onBack(): void;\n}\n\ninterface PunishmentLoaderState {\n    preset: string;\n    isValid: boolean;\n}\n\n\nexport default class PunishmentLoader extends React.Component<PunishmentLoaderProps, PunishmentLoaderState> {\n    state = {\n        preset: '',\n        isValid: false,\n    };\n\n    render() {\n        return (\n            <div className=\"container my-4\">\n                <h2>Carry Out a Custom Punishment</h2>\n\n                <div className=\"row my-3\">\n                    <div className=\"col-md-10\">\n                        <button\n                            className=\"btn btn-primary btn-block btn-lg\"\n                            onClick={this.start}\n                            disabled={!this.state.isValid}\n                        >\n                            Start the Custom Punishment Now\n                        </button>\n                    </div>\n                    <div className=\"col-md-2\">\n                        <button className=\"btn btn-secondary btn-block btn-lg\" onClick={this.props.onBack}>\n                            Back\n                        </button>\n                    </div>\n                </div>\n\n                <form className=\"form\">\n                    <div className=\"form-group\">\n                        <label>Custom punishment:</label>\n                        <textarea\n                            className=\"form-control\"\n                            rows={24}\n                            cols={90}\n                            value={this.state.preset}\n                            onChange={this.onChange}\n                        />\n                        <small className=\"form-text text-muted\">\n                            In either JSON or \"BEGIN CORNERTIME CUSTOM PUNISHMENT\" format.\n                        </small>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n    start = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const fsm = this.props.fsm;\n\n        fsm.loadPreset(this.loadPreset());\n        fsm.getReady();\n    }\n\n    loadPreset() {\n        try {\n            return deserializePreset(this.state.preset);\n        } catch (e) {\n            return JSON.parse(this.state.preset);\n        }\n    }\n\n    onChange = (event: React.FormEvent<HTMLTextAreaElement>) => {\n        const preset = event.currentTarget.value;\n\n        let isValid = false;\n        try {\n            deserializePreset(preset);\n            isValid = true;\n        } catch (e) {\n            // noop;\n        }\n\n        this.setState({ preset, isValid });\n    }\n}\n","export function formatDuration(seconds: number): string {\n    let sign = '';\n    if (seconds < 0) {\n        sign = '-';\n        seconds = -seconds;\n    }\n\n    let minutes = Math.floor(seconds / 60);\n    seconds %= 60;\n    const formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;\n\n    let hours = Math.floor(minutes / 60);\n    minutes %= 60;\n\n    if (hours) {\n        const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\n        return `${sign}${hours}:${formattedMinutes}:${formattedSeconds}`;\n    } else {\n        return `${sign}${minutes}:${formattedSeconds}`;\n    }\n}\n","import * as React from 'react';\nimport { Report, Event } from '../models';\nimport { formatDuration } from '../time';\nimport { serializeReport } from '../serialization';\n\n\nfunction formatEventMessage(event: Event) {\n    switch (event.eventType) {\n        case 'getReady':\n            return `Preparation started.`;\n\n        case 'start':\n            return `Punishment started.`;\n\n        case 'scold':\n            return `Scolded for moving.`;\n\n        case 'encourage':\n            return `Encouragement given.`;\n\n        case 'penalize':\n            return `Penalized for moving. Time added: ${formatDuration(event.adjustment)}`;\n\n        case 'end':\n            return `Punishment finished.`;\n\n        default:\n            return `Unknown event type!`;\n    }\n}\n\n\ninterface ReportCardProps {\n    report: Report;\n    showMessage?: boolean;\n}\n\n\nexport default class ReportCard extends React.Component<ReportCardProps, {}> {\n    render() {\n        const report = this.props.report;\n\n        return (\n            <div className=\"container my-4\">\n                {this.props.showMessage ? (\n                    <div className=\"jumbotron\">\n                        <h1 className=\"display-3\">Your punishment is over.</h1>\n                        <p className=\"lead\">\n                            I hope you have learned your lesson. If not, I'll be seeing you again!\n                        </p>\n                        <a href=\"/\" className=\"btn btn-primary btn-block btn-lg\">\n                            I did not Learn My Lesson! I need another punishment.\n                        </a>\n                    </div>\n                ) : null}\n\n                <h2 className=\"my-3\">Punishment report</h2>\n\n                <table className=\"table\">\n                    <tbody>\n                        {/* <tr>\n                            <td>Name:</td>\n                            <td>{report.name}</td>\n                        </tr>\n\n                        <tr>\n                            <td>Preset:</td>\n                            <td>{report.presetTitle}</td>\n                        </tr> */}\n\n                        <tr>\n                            <td>Started at:</td>\n                            <td>{report.startedAt}</td>\n                        </tr>\n\n                        <tr>\n                            <td>Initial duration:</td>\n                            <td>{formatDuration(report.initialDuration)}</td>\n                        </tr>\n\n                        <tr>\n                            <td>Total duration:</td>\n                            <td>{formatDuration(report.totalDuration)}</td>\n                        </tr>\n\n                        <tr>\n                            <td>Number of movement violations:</td>\n                            <td>{report.violations}</td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <table className=\"table my-4\">\n                    <thead>\n                        <tr>\n                            <th className=\"text-right\">Time</th>\n                            <th>Event</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {report.events.filter(event =>\n                            event.eventType !== 'getReady' && event.eventType !== 'start'\n                        ).map(event => (\n                            <tr key={event.time}>\n                                <td className=\"text-right\">{formatDuration(event.time)}</td>\n                                <td>{formatEventMessage(event)}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n                {this.props.showMessage ? (\n                    <div>\n                        <p className=\"my-4\"><small>\n                            If you were instructed by someone to take this punishment, you can give them this encoded\n                            report that contains the same information as you see above:\n                        </small></p>\n\n                        <pre>{serializeReport(report)}</pre>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n","import { deserializeReport } from '../serialization';\nimport * as React from 'react';\nimport { Report } from '../models';\nimport ReportCard from './ReportCard';\n\n\ninterface ReportViewerProps {\n    onBack(): void;\n}\n\n\ninterface ReportViewerState {\n    reportSource: string;\n    report?: Report;\n}\n\n\nexport default class ReportViewer extends React.Component<ReportViewerProps, ReportViewerState> {\n    state: ReportViewerState = {\n        reportSource: '',\n    };\n\n    render() {\n        return (\n            <div className=\"container my-4\">\n                <h2>View the Report of a Previous Punishment</h2>\n\n                <button className=\"btn btn-secondary btn-block btn-lg my-4\" onClick={this.props.onBack}>\n                    Back\n                </button>\n\n                <form className=\"form\">\n                    <div className=\"form-group\">\n                        <label>Punishment report:</label>\n                        <textarea\n                            className=\"form-control\"\n                            rows={12}\n                            cols={90}\n                            value={this.state.reportSource}\n                            onChange={this.onChange}\n                        />\n                        <small className=\"form-text text-muted\">\n                            If you instructed someone to take a punishment and received a punishment report\n                            from them, enter the report here to view its contents.\n                        </small>\n                    </div>\n                </form>\n\n                {this.state.report ? <ReportCard report={this.state.report} /> : null}\n            </div>\n        );\n    }\n\n    onChange = (event: React.FormEvent<HTMLTextAreaElement>) => {\n        let reportSource = event.currentTarget.value;\n        let report: Report | undefined = undefined;\n\n        try {\n            report = deserializeReport(reportSource);\n        } catch (e) {\n            // Wasn't a valid report. Won't show anything.\n        }\n\n        this.setState({ report, reportSource });\n    }\n}\n","import * as React from 'react';\nimport PunishmentStateMachine from '../state';\nimport getSettings from '../settings';\nimport { create } from 'diffyjs';\nimport WelcomeScreen from './WelcomeScreen';\nimport PunishmentSetup from './PunishmentSetup';\nimport PunishmentLoader from './PunishmentLoader';\nimport ReportCard from './ReportCard';\nimport ReportViewer from './ReportViewer';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { formatDuration } from '../time';\n\n\nconst MOTION_MAX = 255;\ntype SetupScreen = 'default' | 'custom' | 'report' | 'preset';\n\ninterface AppState {\n    setupScreen: SetupScreen;\n}\n\n\nclass App extends React.Component<{}, AppState> {\n    fsm = new PunishmentStateMachine();\n    settings = getSettings();\n    diffy: any;\n\n    state: AppState = {\n        setupScreen: 'default',\n    };\n\n    componentDidMount() {\n        this.fsm.addListener(this.handleFsmUpdate);\n\n        // Debug globals\n        if (typeof window !== 'undefined') {\n            const anyWindow: any = window;\n            anyWindow.cornertime = anyWindow.cornertime || {};\n            anyWindow.cornertime.fsm = this.fsm;\n        }\n\n        if (process.env.NODE_ENV !== 'test') {\n            this.diffy = create({\n                ...this.settings.diffy,\n                onFrame: matrix => this.handleMotionUpdate(matrix),\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this.fsm.removeListener(this.handleFsmUpdate);\n    }\n\n    render() {\n        const fsm = this.fsm;\n\n        switch (fsm.state) {\n            case 'waiting':\n                switch (this.state.setupScreen) {\n                    case 'custom':\n                        return <PunishmentSetup fsm={fsm} onBack={this.returnToWelcomeScreen} />;\n                    case 'preset':\n                        return <PunishmentLoader fsm={fsm} onBack={this.returnToWelcomeScreen} />;\n                    case 'report':\n                        return <ReportViewer onBack={this.returnToWelcomeScreen} />;\n                    default:\n                        return (\n                            <WelcomeScreen\n                                fsm={fsm}\n                                onCustom={this.setUpCustom}\n                                onPreset={this.loadPreset}\n                                onReport={this.viewReport}\n                            />\n                        );\n                }\n\n            case 'preparation':\n                return (\n                    <h1 className=\"display-2 my-5 text-center\">\n                        The punishment will start in {formatDuration(-fsm.currentTime)}.\n                    </h1>\n                );\n\n            case 'punishment':\n            case 'cooldown':\n                return <h1 className=\"display-1 my-5 text-center\">{formatDuration(fsm.timeLeft)}</h1>;\n\n            case 'finished':\n                return <ReportCard report={fsm.report()} showMessage={true} />;\n\n            default:\n                return null;\n        }\n    }\n\n    setUpCustom = () => this.setState({ setupScreen: 'custom' });\n    viewReport = () => this.setState({ setupScreen: 'report' });\n    loadPreset = () => this.setState({ setupScreen: 'preset' });\n    returnToWelcomeScreen = () => this.setState({ setupScreen: 'default' });\n\n    handleFsmUpdate = () => {\n        this.forceUpdate();\n    }\n\n    handleMotionUpdate = (matrix: number[][]) => {\n        // matrix elements seem to be 0–255 with 255 meaning \"no movement\", 0 meaning \"chaos\"\n        // we turn it into a a single number 0.0–1.0 by taking busiest cell\n        const minValue = Math.min(...matrix.map(row => Math.min(...row)));\n        const magnitude = (MOTION_MAX - minValue) / MOTION_MAX;\n        this.fsm.handleMotionUpdate(magnitude);\n    }\n}\n\nexport default App;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root') as HTMLElement\n);\n"],"sourceRoot":""}